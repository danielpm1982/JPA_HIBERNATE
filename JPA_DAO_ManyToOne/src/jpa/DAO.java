package jpa;
import java.util.Arrays;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

public class DAO implements DAOAdapterInterface{
    private EntityManagerFactory factory;
    private EntityManager em;
    public DAO() {
    }
    @Override
    public void openResources(){
        factory = Persistence.createEntityManagerFactory("JPA_DAOPU");
        em = factory.createEntityManager();
    }
    @Override
    public void closeResources(){
        if(em.isOpen()){
            em.close();
        }
        if(factory.isOpen()){
            factory.close();
        }
    }
    @Override
    public Client[] searchAllClients() {
        String query = "select e from Client e";
        List<Client> clientList = em.createQuery(query, Client.class).getResultList();
        return clientList.toArray(new Client[0]);
    }
    @Override
    public Client[] searchClientByName(String name) {
        String query = "select e from Client e where e.name = '"+name+"'"; //searching by exact name, not similar ones.
        List<Client> clientList = em.createQuery(query, Client.class).getResultList();
        return clientList.toArray(new Client[0]);
    }
    @Override
    public Department[] searchDepartmentByName(String name) {
        String query = "select d from Department d where d.nameDep= '"+name+"'";
        List<Department> departmentList = em.createQuery(query, Department.class).getResultList();
        return departmentList.toArray(new Department[0]);
    }
    @Override
    public Client searchClientById(long id) {
        String query = "select e from Client e where e.id = '"+id+"'";
        Client clientTemp = em.createQuery(query, Client.class).getSingleResult();
        return clientTemp;
    }
    @Override
    public Department[] searchAllDepartments() {
        String query = "select d from Department d";
        List<Department> departmentList = em.createQuery(query, Department.class).getResultList();
        return departmentList.toArray(new Department[0]);
    }
    @Override
    public void insertClient(Client client) { //inserting incomplete Client object, without id (autogenerated by the dbms); default id=-1;
        em.getTransaction().begin();
        em.persist(client);
        em.getTransaction().commit();
    }
    @Override
    public void insertDepartment(Department department) { //inserting complete Department object, with id as departmentNo set (not autogenerated by the dbms); default id=-1;
        em.getTransaction().begin();
        em.persist(department);
        em.getTransaction().commit();
    }
    @Override
    public void deleteClient(Client client) { //if argument client is a complete object (with id) remove it, if not, search for all registries that match the name of the argument passed and delete ALL of them.
        em.getTransaction().begin();
        if(client.getId()==-1){
            Client[] clientTemp = searchClientByName(client.getName());
            Arrays.asList(clientTemp).forEach(x->em.remove(x));
        } else{
            em.remove(client);
        }
        em.getTransaction().commit();
    }
    @Override
    public void updateClient(Client oldClient, Client newClient) { //if argument oldClient is a complete object (with id) update it, if not, search for all registries that match the name of the argument passed and rename ALL of them.
        em.getTransaction().begin();
        if(oldClient.getId()==-1){
            Client[] clientTemp = searchClientByName(oldClient.getName());
            Arrays.asList(clientTemp).forEach(x -> {
                x.setName(newClient.getName());
                x.setPhoneNo(newClient.getPhoneNo());
                x.setSalary(newClient.getSalary());
                x.setBirthDate(newClient.getBirthDate());
                x.setRegisteredIn(newClient.getRegisteredIn());
                x.setDepartment(newClient.getDepartment());
                em.persist(x);
            });
        } else{
            oldClient.setName(newClient.getName());
            oldClient.setPhoneNo(newClient.getPhoneNo());
            oldClient.setSalary(newClient.getSalary());
            oldClient.setBirthDate(newClient.getBirthDate());
            oldClient.setRegisteredIn(newClient.getRegisteredIn());
            oldClient.setDepartment(newClient.getDepartment());
            em.persist(oldClient);
            
        }
        em.getTransaction().commit();
    }
    @Override
    public void updateDepartment(Department oldDepartment, Department newDepartment) { //if argument oldDepartment is a complete object (with id) update it, if not, search for all registries that match the name of the argument passed and rename ALL of them.
        em.getTransaction().begin();
        if(oldDepartment.getDepartmentNo()==-1){
            Department[] departmentTemp = searchDepartmentByName(oldDepartment.getNameDep());
            Arrays.asList(departmentTemp).forEach(x -> {
                x.setNameDep(newDepartment.getNameDep());
                x.setOperationPeriod(newDepartment.getOperationPeriod());
                x.setAddress(newDepartment.getAddress());
                em.persist(x);
            });
        } else{
            oldDepartment.setNameDep(newDepartment.getNameDep());
            oldDepartment.setOperationPeriod(newDepartment.getOperationPeriod());
            oldDepartment.setAddress(newDepartment.getAddress());
            em.persist(oldDepartment);
        }
        em.getTransaction().commit();
    }
}
